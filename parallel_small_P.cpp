#include "Preproduct.h"
#include "rollsieve.h"
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <vector>
#include "mpi.h"

// compiled and run with:
// mpic++ -o parallel parallel_small_P.cpp Preproduct.o rollsieve.o -lgmp -O3
// mpirun --hostfile hostfile.txt -n 156 ./parallel &

int main(int argc, char * argv[])
{
    int my_rank;            // my CPU number for this process
    int proc;               // number of CPUs that we have

    MPI_Init(&argc, &argv);                     // Start MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);    // Find my rank
    MPI_Comm_size(MPI_COMM_WORLD, &proc);       // Find out the number of processes!

    std::string file_name = "phi179_185_very_small_" + std::to_string(my_rank) + ".txt";

    uint16_t work_count = 0;
    
     std::vector< uint64_t > P =  {      179,      181,      185,      187,      191,      193,      197,      199,      209,      211,      213,      215,      217,      221,      223,      227,      229,      233,      235,      239 };
     std::vector< uint64_t > L =  {      178,      180,       36,       80,      190,      192,      196,      198,       90,      210,       70,       84,       30,       48,      222,      226,      228,      232,       92,      238 };
     std::vector< uint64_t > AB = {   698324,   690607,   675675,   668449,   654450,   647668,   634517,   628140,   598086,   592417,   586854,   581395,   576036,   565610,   560538,   550660,   545851,   536480,   531914,   523012 };
     std::vector< uint64_t > ub = { 17743898, 17678301, 17549960, 17487169, 17364232, 17304044, 17186125, 17128356, 16850700, 16797290, 16744551, 16692468, 16641027, 16540017, 16490421, 16392987, 16345124, 16251049, 16204815, 16113903 };
    /*
     std::vector< uint64_t > P =  {     241,      247,      249,      251,      255,      257,      259,      263,      265,      267,      269,      271,      277,      281,      283,      287,      293,      295,      299,      303 };
     std::vector< uint64_t > L =  {     240,       36,       82,      250,       16,      256,       36,      262,       52,       88,      268,      270,      276,      280,      282,      120,      292,      116,      132,      100 };
     std::vector< uint64_t > AB = {  518672,   506072,   502008,   498007,   490196,   486381,   482625,   475285,   471698,   468164,   464684,   461254,   451263,   444839,   441696,   435540,   426621,   423728,   418060,   412541 };
     std::vector< uint64_t > ub = {16069204, 15938021, 15895234, 15852903, 15769575, 15728561, 15687971, 15608031, 15568667, 15529696, 15491113, 15452910, 15340521, 15267383, 15231332, 15160240, 15056043, 15021941, 14954652, 14888553 };
     
     std::vector< uint64_t > P =  {      307,      311,      313,      317,      319,      321,      323,      329,      331,      335,      337,      339,      341,      345,      347,      349,      353,      359,      365,      367 };
     std::vector< uint64_t > L =  {      306,      310,      312,      316,      140,      106,      144,      138,      330,      132,      336,      112,       30,       44,      346,      348,      352,      358,       72,      366 };
     std::vector< uint64_t > AB = {   407166,   401929,   399361,   394321,   391849,   389408,   386996,   379939,   377643,   373134,   370919,   368731,   366568,   362318,   360230,   358166,   354107,   348189,   342465,   340599 };
     std::vector< uint64_t > ub = { 14823608, 14759781, 14728277, 14666066, 14635351, 14604893, 14574686, 14485542, 14456308, 14398540, 14369999, 14341684, 14313590, 14258057, 14230611, 14203376, 14149523, 14070253, 13992729, 13967265 };
     */
    
    for( int i = 0; i < 3; i++)
    {
        Rollsieve r( AB[i] );
        uint64_t q = r.nextprime();
        Preproduct small_P = Preproduct();
        small_P.initializing( P[i], L[i], AB[i] );
        Preproduct Pq = Preproduct();

        while( q < ub[i] )
        {
            if( small_P.is_admissible_modchecks( q ) )
            {
                work_count++;
                work_count = work_count % proc;
                if( work_count == my_rank )
                {
                    Pq.appending( small_P, q );
                    Pq.CN_multiples_of_P( file_name );
                }
            }
            q = r.nextprime();
        }
    }

    MPI_Finalize();

    return 0;
}

// These have been done:
/*
std::vector< uint64_t > P =   {        3,        5,        7,       11,      13,        15,       17,       19,       23,       29,       31,       33,       35,       37,       41,       43,       47,       51,       53,       59 };
std::vector< uint64_t > L =   {        2,        4,        6,       10,      12,         4,       16,       18,       22,       28,       30,       10,       12,       36,       40,       42,       46,       16,       52,       58 };
std::vector< uint64_t > AB =  { 41666666, 25000000, 17857142, 11363636,  9615384,  8333333,  7352941,  6578947,  5434782,  4310344,  4032258,  3787878,  3571428,  3378378,  3048780,  2906976,  2659574,  2450980,  2358490,  2118644 };
std::vector< uint64_t > ub =  { 69336128, 58480355, 52275796, 44964432, 42529038, 40548014, 38891112, 37475618, 35163390, 32548728, 31833138, 31176596, 30571072, 30010008, 29000494, 28543718, 27709842, 26965592, 26622044, 25687155 };
 
std::vector< uint64_t > P =  {       61,       65,       67,       69,       71,       73,       77,       79,       83,       85,       87,       89,       91,       95,       97,      101,      103,      107,      109,      113 };
std::vector< uint64_t > L =  {       60,       12,       66,       22,       70,       72,       30,       78,       82,       16,       28,       88,       12,       36,       96,      100,      102,      106,      108,      112 };
std::vector< uint64_t > AB = {  2049180,  1923076,  1865671,  1811594,  1760563,  1712328,  1623376,  1582278,  1506024,  1470588,  1436781,  1404494,  1373626,  1315789,  1288659,  1237623,  1213592,  1168224,  1146788,  1106194 };
std::vector< uint64_t > ub = { 25403297, 24871133, 24621155, 24380933, 24149821, 23927229, 23505516, 23305459, 22924894, 22743662, 22568028, 22397697, 22232394, 21915876, 21764204, 21473009, 21333116, 21063899, 20934272, 20684287 };
 
std::vector< uint64_t > P =  {      115,      119,      123,      127,      131,      133,      137,      139,      141,      143,      145,      149,     151,       157,      159,      161,      163,     167,       173,      177 };
std::vector< uint64_t > L =  {       44,       48,       40,      126,      130,       18,      136,      138,       46,       60,       28,      148,     150,       156,       52,       66,      162,     166,       172,       58 };
std::vector< uint64_t > AB = {  1086956,  1050420,  1016260,   984251,   954198,   939849,   912408,   899280,   886524,   874125,   862068,   838926,   827814,   796178,   786163,   776397,   766871,   748502,   722543,   706214 };
std::vector< uint64_t > ub = { 20563676, 20330640, 20107820, 19894459, 19689874, 19590679, 19398129, 19304643, 19212933, 19122941, 19034612, 18862733, 18779083, 18536745, 18458695, 18381943, 18306451, 18159109, 17946703, 17810480 };

old bigdawg did 1 < P < 60      (started 3-25,
new bigdawg did 60 < P < 114    (started 3-26, finished 3-28)
xeon phi P = 115            (started 3-27: 20 hours )
xeon phi P = 119            (started 3-28: 22 hours )
new bigdawg 120 < P < 178       (started 8:21am 3-29 )
xeon phi  178 < P < 186          (started 8:24am 3-29)
 
 */
